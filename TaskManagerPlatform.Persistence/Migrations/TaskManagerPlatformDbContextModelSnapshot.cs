// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagerPlatform.Persistence.Contexts;

namespace TaskManagerPlatform.Persistence.Migrations
{
    [DbContext(typeof(TaskManagerPlatformDbContext))]
    partial class TaskManagerPlatformDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63e78133-b0e2-4ea0-ab46-55f77e2ff74f"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 699, DateTimeKind.Local).AddTicks(7933),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "sign up"
                        },
                        new
                        {
                            Id = new Guid("5b011b03-d4b1-4867-a125-3a9b6dca426f"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 700, DateTimeKind.Local).AddTicks(6079),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "sign in"
                        },
                        new
                        {
                            Id = new Guid("dba63703-cd68-4d18-ba7c-0f0b93518fbb"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 700, DateTimeKind.Local).AddTicks(6092),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "manage users"
                        },
                        new
                        {
                            Id = new Guid("622a1d57-ed3d-456f-9be4-02e5a8879e60"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 700, DateTimeKind.Local).AddTicks(6095),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "manage tasks"
                        });
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a0a1d8a-028a-4514-b63b-266b491f8cfe"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(5896),
                            Description = "administrator",
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("a7077177-af67-451e-ab34-d9f89d253650"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(6501),
                            Description = "user who is registered by admin",
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "user"
                        });
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.RoleToPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleToPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3234a323-dddd-4e23-b98b-d1f6c93cc699"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(6938),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("63e78133-b0e2-4ea0-ab46-55f77e2ff74f"),
                            RoleId = new Guid("7a0a1d8a-028a-4514-b63b-266b491f8cfe")
                        },
                        new
                        {
                            Id = new Guid("6007b291-7964-454f-9f4a-f20e68c4fe11"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(7922),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("5b011b03-d4b1-4867-a125-3a9b6dca426f"),
                            RoleId = new Guid("7a0a1d8a-028a-4514-b63b-266b491f8cfe")
                        },
                        new
                        {
                            Id = new Guid("c349b699-a03c-499c-9af1-973aa102faac"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(7934),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("dba63703-cd68-4d18-ba7c-0f0b93518fbb"),
                            RoleId = new Guid("7a0a1d8a-028a-4514-b63b-266b491f8cfe")
                        },
                        new
                        {
                            Id = new Guid("01b9c90c-ee29-4945-84b6-347d7f3069f8"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(7936),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("5b011b03-d4b1-4867-a125-3a9b6dca426f"),
                            RoleId = new Guid("a7077177-af67-451e-ab34-d9f89d253650")
                        },
                        new
                        {
                            Id = new Guid("60b5a387-b28b-4e5a-b01f-bce5407a6bfa"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(7939),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("622a1d57-ed3d-456f-9be4-02e5a8879e60"),
                            RoleId = new Guid("a7077177-af67-451e-ab34-d9f89d253650")
                        });
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e376b31f-7f33-4437-86ce-e2d35e67af07"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(8341),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "to do"
                        },
                        new
                        {
                            Id = new Guid("f34d3064-463c-4112-97f6-3d2390e380d2"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(8595),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "doing"
                        },
                        new
                        {
                            Id = new Guid("f4bc786d-776b-4735-88cb-7658c1dd73ce"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(8600),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "test"
                        },
                        new
                        {
                            Id = new Guid("0b1883f8-54c5-4c61-9d21-3ff37c827d9f"),
                            CreatedDate = new DateTime(2021, 6, 15, 23, 14, 24, 701, DateTimeKind.Local).AddTicks(8602),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "done"
                        });
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.UserToRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserToRoles");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.UserToTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("UserToTasks");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.RoleToPermission", b =>
                {
                    b.HasOne("TaskManagerPlatform.Domain.Entities.Permission", "Permission")
                        .WithMany("RoleToPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagerPlatform.Domain.Entities.Role", "Role")
                        .WithMany("RoleToPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Task", b =>
                {
                    b.HasOne("TaskManagerPlatform.Domain.Entities.Status", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.User", b =>
                {
                    b.HasOne("TaskManagerPlatform.Domain.Entities.User", "Organization")
                        .WithMany("Employees")
                        .HasForeignKey("OrganizationId")
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.UserToRole", b =>
                {
                    b.HasOne("TaskManagerPlatform.Domain.Entities.Role", "Role")
                        .WithMany("UserToRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagerPlatform.Domain.Entities.User", "User")
                        .WithMany("UserToRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.UserToTask", b =>
                {
                    b.HasOne("TaskManagerPlatform.Domain.Entities.Task", "Task")
                        .WithMany("UserToTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagerPlatform.Domain.Entities.User", "User")
                        .WithMany("UserToTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RoleToPermissions");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleToPermissions");

                    b.Navigation("UserToRoles");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Status", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.Task", b =>
                {
                    b.Navigation("UserToTasks");
                });

            modelBuilder.Entity("TaskManagerPlatform.Domain.Entities.User", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("UserToRoles");

                    b.Navigation("UserToTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
